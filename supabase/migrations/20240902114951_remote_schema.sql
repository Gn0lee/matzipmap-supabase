create table "public"."groups" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "description" text
);


alter table "public"."groups" enable row level security;

create table "public"."review-reactions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "review_id" bigint,
    "reaction_type" text
);


alter table "public"."review-reactions" enable row level security;

create table "public"."reviews" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "group_id" uuid,
    "place_id" integer,
    "text" text,
    "updated_at" timestamp with time zone
);


alter table "public"."reviews" enable row level security;

create table "public"."user-group-memberships" (
    "id" bigint generated by default as identity not null,
    "joined_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "group_id" uuid
);


alter table "public"."user-group-memberships" enable row level security;

create table "public"."user-membership-limits" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "max_groups" integer default 3
);


alter table "public"."user-membership-limits" enable row level security;

alter table "public"."place-info" enable row level security;

CREATE UNIQUE INDEX groups_pkey ON public.groups USING btree (id);

CREATE UNIQUE INDEX "review-reactions_pkey" ON public."review-reactions" USING btree (id);

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

CREATE UNIQUE INDEX "user-group-memberships_pkey" ON public."user-group-memberships" USING btree (id);

CREATE UNIQUE INDEX "user-membership-limits_pkey" ON public."user-membership-limits" USING btree (id);

alter table "public"."groups" add constraint "groups_pkey" PRIMARY KEY using index "groups_pkey";

alter table "public"."review-reactions" add constraint "review-reactions_pkey" PRIMARY KEY using index "review-reactions_pkey";

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."user-group-memberships" add constraint "user-group-memberships_pkey" PRIMARY KEY using index "user-group-memberships_pkey";

alter table "public"."user-membership-limits" add constraint "user-membership-limits_pkey" PRIMARY KEY using index "user-membership-limits_pkey";

alter table "public"."review-reactions" add constraint "review-reactions_review_id_fkey" FOREIGN KEY (review_id) REFERENCES reviews(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."review-reactions" validate constraint "review-reactions_review_id_fkey";

alter table "public"."review-reactions" add constraint "review-reactions_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."review-reactions" validate constraint "review-reactions_user_id_fkey1";

alter table "public"."reviews" add constraint "reviews_group_id_fkey" FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_group_id_fkey";

alter table "public"."reviews" add constraint "reviews_place_id_fkey" FOREIGN KEY (place_id) REFERENCES "place-info"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_place_id_fkey";

alter table "public"."reviews" add constraint "reviews_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_user_id_fkey1";

alter table "public"."user-group-memberships" add constraint "user-group-memberships_group_id_fkey" FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user-group-memberships" validate constraint "user-group-memberships_group_id_fkey";

alter table "public"."user-group-memberships" add constraint "user-group-memberships_user_id_fkey2" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user-group-memberships" validate constraint "user-group-memberships_user_id_fkey2";

alter table "public"."user-membership-limits" add constraint "user-membership-limits_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user-membership-limits" validate constraint "user-membership-limits_user_id_fkey1";

grant delete on table "public"."groups" to "anon";

grant insert on table "public"."groups" to "anon";

grant references on table "public"."groups" to "anon";

grant select on table "public"."groups" to "anon";

grant trigger on table "public"."groups" to "anon";

grant truncate on table "public"."groups" to "anon";

grant update on table "public"."groups" to "anon";

grant delete on table "public"."groups" to "authenticated";

grant insert on table "public"."groups" to "authenticated";

grant references on table "public"."groups" to "authenticated";

grant select on table "public"."groups" to "authenticated";

grant trigger on table "public"."groups" to "authenticated";

grant truncate on table "public"."groups" to "authenticated";

grant update on table "public"."groups" to "authenticated";

grant delete on table "public"."groups" to "service_role";

grant insert on table "public"."groups" to "service_role";

grant references on table "public"."groups" to "service_role";

grant select on table "public"."groups" to "service_role";

grant trigger on table "public"."groups" to "service_role";

grant truncate on table "public"."groups" to "service_role";

grant update on table "public"."groups" to "service_role";

grant delete on table "public"."review-reactions" to "anon";

grant insert on table "public"."review-reactions" to "anon";

grant references on table "public"."review-reactions" to "anon";

grant select on table "public"."review-reactions" to "anon";

grant trigger on table "public"."review-reactions" to "anon";

grant truncate on table "public"."review-reactions" to "anon";

grant update on table "public"."review-reactions" to "anon";

grant delete on table "public"."review-reactions" to "authenticated";

grant insert on table "public"."review-reactions" to "authenticated";

grant references on table "public"."review-reactions" to "authenticated";

grant select on table "public"."review-reactions" to "authenticated";

grant trigger on table "public"."review-reactions" to "authenticated";

grant truncate on table "public"."review-reactions" to "authenticated";

grant update on table "public"."review-reactions" to "authenticated";

grant delete on table "public"."review-reactions" to "service_role";

grant insert on table "public"."review-reactions" to "service_role";

grant references on table "public"."review-reactions" to "service_role";

grant select on table "public"."review-reactions" to "service_role";

grant trigger on table "public"."review-reactions" to "service_role";

grant truncate on table "public"."review-reactions" to "service_role";

grant update on table "public"."review-reactions" to "service_role";

grant delete on table "public"."reviews" to "anon";

grant insert on table "public"."reviews" to "anon";

grant references on table "public"."reviews" to "anon";

grant select on table "public"."reviews" to "anon";

grant trigger on table "public"."reviews" to "anon";

grant truncate on table "public"."reviews" to "anon";

grant update on table "public"."reviews" to "anon";

grant delete on table "public"."reviews" to "authenticated";

grant insert on table "public"."reviews" to "authenticated";

grant references on table "public"."reviews" to "authenticated";

grant select on table "public"."reviews" to "authenticated";

grant trigger on table "public"."reviews" to "authenticated";

grant truncate on table "public"."reviews" to "authenticated";

grant update on table "public"."reviews" to "authenticated";

grant delete on table "public"."reviews" to "service_role";

grant insert on table "public"."reviews" to "service_role";

grant references on table "public"."reviews" to "service_role";

grant select on table "public"."reviews" to "service_role";

grant trigger on table "public"."reviews" to "service_role";

grant truncate on table "public"."reviews" to "service_role";

grant update on table "public"."reviews" to "service_role";

grant delete on table "public"."user-group-memberships" to "anon";

grant insert on table "public"."user-group-memberships" to "anon";

grant references on table "public"."user-group-memberships" to "anon";

grant select on table "public"."user-group-memberships" to "anon";

grant trigger on table "public"."user-group-memberships" to "anon";

grant truncate on table "public"."user-group-memberships" to "anon";

grant update on table "public"."user-group-memberships" to "anon";

grant delete on table "public"."user-group-memberships" to "authenticated";

grant insert on table "public"."user-group-memberships" to "authenticated";

grant references on table "public"."user-group-memberships" to "authenticated";

grant select on table "public"."user-group-memberships" to "authenticated";

grant trigger on table "public"."user-group-memberships" to "authenticated";

grant truncate on table "public"."user-group-memberships" to "authenticated";

grant update on table "public"."user-group-memberships" to "authenticated";

grant delete on table "public"."user-group-memberships" to "service_role";

grant insert on table "public"."user-group-memberships" to "service_role";

grant references on table "public"."user-group-memberships" to "service_role";

grant select on table "public"."user-group-memberships" to "service_role";

grant trigger on table "public"."user-group-memberships" to "service_role";

grant truncate on table "public"."user-group-memberships" to "service_role";

grant update on table "public"."user-group-memberships" to "service_role";

grant delete on table "public"."user-membership-limits" to "anon";

grant insert on table "public"."user-membership-limits" to "anon";

grant references on table "public"."user-membership-limits" to "anon";

grant select on table "public"."user-membership-limits" to "anon";

grant trigger on table "public"."user-membership-limits" to "anon";

grant truncate on table "public"."user-membership-limits" to "anon";

grant update on table "public"."user-membership-limits" to "anon";

grant delete on table "public"."user-membership-limits" to "authenticated";

grant insert on table "public"."user-membership-limits" to "authenticated";

grant references on table "public"."user-membership-limits" to "authenticated";

grant select on table "public"."user-membership-limits" to "authenticated";

grant trigger on table "public"."user-membership-limits" to "authenticated";

grant truncate on table "public"."user-membership-limits" to "authenticated";

grant update on table "public"."user-membership-limits" to "authenticated";

grant delete on table "public"."user-membership-limits" to "service_role";

grant insert on table "public"."user-membership-limits" to "service_role";

grant references on table "public"."user-membership-limits" to "service_role";

grant select on table "public"."user-membership-limits" to "service_role";

grant trigger on table "public"."user-membership-limits" to "service_role";

grant truncate on table "public"."user-membership-limits" to "service_role";

grant update on table "public"."user-membership-limits" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."groups"
as permissive
for delete
to authenticated, supabase_admin
using (true);


create policy "Enable insert for authenticated users only"
on "public"."groups"
as permissive
for insert
to authenticated, supabase_admin
with check (true);


create policy "Enable read access for all users"
on "public"."groups"
as permissive
for select
to supabase_admin, authenticated
using (true);


create policy "Enable update for users based on email"
on "public"."groups"
as permissive
for update
to authenticated, supabase_admin
using (true);


create policy "Enable insert for users based on user_id"
on "public"."place-info"
as permissive
for insert
to anon, supabase_admin
with check (true);


create policy "Enable read access for all users"
on "public"."place-info"
as permissive
for select
to anon, supabase_admin
using (true);


create policy "Enable update for users based on email"
on "public"."place-info"
as permissive
for update
to anon, supabase_admin
using (true);


create policy "Enable insert for authenticated users only"
on "public"."review-reactions"
as permissive
for insert
to authenticated, supabase_admin
with check (true);


create policy "Enable read access for all users"
on "public"."review-reactions"
as permissive
for select
to anon, supabase_admin
using (true);


create policy "Enable update for users based on email"
on "public"."review-reactions"
as permissive
for update
to authenticated, supabase_admin
using (true);


create policy "delete"
on "public"."review-reactions"
as permissive
for delete
to authenticated, supabase_admin
using (true);


create policy "Enable insert for authenticated users only"
on "public"."reviews"
as permissive
for insert
to authenticated, supabase_admin
with check (true);


create policy "Enable read access for all users"
on "public"."reviews"
as permissive
for select
to anon, supabase_admin
using (true);


create policy "Enable update for users based on email"
on "public"."reviews"
as permissive
for update
to authenticated, supabase_admin
using (true);


create policy "delete"
on "public"."reviews"
as permissive
for delete
to authenticated, supabase_admin
using (true);


create policy "Enable insert for authenticated users only"
on "public"."user-group-memberships"
as permissive
for insert
to authenticated, supabase_admin
with check (true);


create policy "Enable read access for all users"
on "public"."user-group-memberships"
as permissive
for select
to authenticated, supabase_admin
using (true);


create policy "delete"
on "public"."user-group-memberships"
as permissive
for delete
to authenticated, supabase_admin
using (true);


create policy "update"
on "public"."user-group-memberships"
as permissive
for update
to authenticated, supabase_admin
using (true);


create policy "Enable read access for all users"
on "public"."user-membership-limits"
as permissive
for select
to authenticated, supabase_admin
using (true);


create policy "delete"
on "public"."user-membership-limits"
as permissive
for delete
to authenticated, supabase_admin
using (true);


create policy "insert"
on "public"."user-membership-limits"
as permissive
for insert
to authenticated, supabase_admin
with check (true);


create policy "update"
on "public"."user-membership-limits"
as permissive
for update
to authenticated, supabase_admin
using (true);



